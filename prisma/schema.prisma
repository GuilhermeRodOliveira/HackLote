// file: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- MODELOS E ENUMS AUXILIARES (DEFINIDOS PRIMEIRO) ---

// Enums da carteira
enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PAYMENT_SENT
  PAYMENT_RECEIVED
  REFUND
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

// Enum para o status do chat (NOVO)
enum ChatStatus {
  PENDING_BID // Chat temporário, criado após um lance
  ACTIVE      // Chat ativo, o lance foi aceito
  CLOSED      // Chat fechado, outro lance foi aceito ou o chat foi encerrado
}

// Enum de notificações
enum NotificationType {
  NEW_BID
  BID_ACCEPTED
  MESSAGE
  BOOST_REQUEST_CREATED
  LISTING_BOUGHT
  ORDER_STATUS_UPDATED
}

// Modelos da carteira
model Wallet {
  id           String        @id @default(uuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  balance      Float         @default(0.00)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Transaction {
  id             String            @id @default(uuid())
  walletId       String
  wallet         Wallet            @relation(fields: [walletId], references: [id])
  type           TransactionType
  amount         Float
  description    String?
  status         TransactionStatus @default(PENDING)
  relatedOrderId String?
  orderId        String?
  order          Order?            @relation("OrderTransactions", fields: [orderId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

// --- MODELOS PRINCIPAIS (QUE FAZEM REFERÊNCIA AOS AUXILIARES) ---

model User {
  id                                String    @id @default(uuid())
  nome                              String?
  usuario                           String?   @unique
  email                             String    @unique
  password                          String
  cpf                               String?   @unique
  bio                               String?
  profilePictureUrl                 String?
  country                           String?
  hasChangedUsername                Boolean   @default(false)
  usernameLastChangedAt             DateTime?
  isVerified                        Boolean   @default(false)
  receiveMarketingEmails            Boolean   @default(true)
  receiveOrderUpdates               Boolean   @default(true)
  receiveMessageNotifications       Boolean   @default(true)
  isProfilePublic                   Boolean   @default(true)
  isActivityPublic                  Boolean   @default(true)
  preferredLanguage                 String    @default("pt-BR")
  theme                             String    @default("dark")
  preferredCurrency                 String    @default("BRL")
  failedLoginAttempts               Int       @default(0)
  lockoutUntil                      DateTime?
  boostRequests                     BoostRequest[]
  boostBids                         BoostBid[]
  listings                          Listing[] @relation("SellerListings")
  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime  @updatedAt
  boostNotificationPreferences      BoostNotificationPreference[]
  reviewsGiven                      Review[]  @relation("ReviewGiven")
  reviewsReceived                   Review[]  @relation("ReviewReceived")
  userNotifications                 UserNotification[]
  notifications                     Notification[]
  chatParticipants                  ChatParticipant[]
  sentMessages                      Message[]
  purchases                         Order[]   @relation("BuyerOrders")
  sales                             Order[]   @relation("SellerOrders")
  wallet                            Wallet?
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  category    String
  subCategory String?
  imageUrls   String? 
  attributes  Json?
  game        String
  sellerId    String
  seller      User     @relation("SellerListings", fields: [sellerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Order {
  id          String   @id @default(cuid())
  listingId   String
  buyerId     String
  sellerId    String
  price       Float
  status      String   @default("Pendente")
  notes       String?
  listing     Listing  @relation(fields: [listingId], references: [id])
  buyer       User     @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller      User     @relation("SellerOrders", fields: [sellerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  transactions Transaction[] @relation("OrderTransactions")
}

model BoostRequest {
  id                  String   @id @default(uuid())
  user                User     @relation(fields: [userId], references: [id])
  userId              String
  game                String
  currentRank         String
  desiredRank         String
  description         String?
  createdAt           DateTime @default(now())
  bids                BoostBid[]
  acceptedBidId       String?   @unique
  acceptedBid         BoostBid? @relation("AcceptedBidRelation", fields: [acceptedBidId], references: [id])
  userNotifications   UserNotification[]
  notifications       Notification[]
  // Relacionamento com o chat para chats de boosting
  chats               Chat[]
}

model BoostBid {
  id             String   @id @default(uuid())
  booster        User     @relation(fields: [boosterId], references: [id])
  boosterId      String
  boostRequest   BoostRequest @relation(fields: [boostRequestId], references: [id])
  boostRequestId String
  amount         Float
  estimatedTime  String
  createdAt      DateTime @default(now())
  acceptedBy     BoostRequest? @relation("AcceptedBidRelation")
  notifications  Notification[]
}

model BoostNotificationPreference {
  id        String @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  game      String
  boostType String

  @@unique([userId, game, boostType])
}

model VerificationCode {
  id             String   @id @default(cuid())
  email          String   @unique
  code           String
  expiresAt      DateTime
  nome           String?
  usuario        String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?
  reviewerId  String
  reviewer    User     @relation("ReviewGiven", fields: [reviewerId], references: [id])
  reviewedId  String
  reviewed    User     @relation("ReviewReceived", fields: [reviewedId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([reviewerId, reviewedId])
}

model UserNotification {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  boostRequestId String
  boostRequest   BoostRequest @relation(fields: [boostRequestId], references: [id])
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())

  @@unique([userId, boostRequestId])
}

model Notification {
  id                    String           @id @default(cuid())
  userId                String
  user                  User             @relation(fields: [userId], references: [id])
  type                  NotificationType
  message               String
  relatedBoostRequestId String?
  relatedBoostRequest   BoostRequest?    @relation(fields: [relatedBoostRequestId], references: [id])
  relatedBidId          String?
  relatedBid            BoostBid?        @relation(fields: [relatedBidId], references: [id])
  isRead                Boolean          @default(false)
  createdAt             DateTime         @default(now())
}

// --- MODELOS DE CHAT UNIFICADOS ---
model Chat {
  id              String             @id @default(uuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  participants    ChatParticipant[]
  messages        Message[]
  lastMessageText String?
  lastMessageAt   DateTime?
  // Campos de chat de boosting (NOVO)
  status          ChatStatus         @default(PENDING_BID)
  boostRequestId  String?
  boostRequest    BoostRequest?      @relation(fields: [boostRequestId], references: [id])
}

model ChatParticipant {
  id      String @id @default(uuid())
  chatId  String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  chat    Chat   @relation(fields: [chatId], references: [id])

  @@unique([chatId, userId])
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  text      String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}